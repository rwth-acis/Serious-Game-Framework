module.exports = (function() {
    var authTokens = require('./auth-tokens');
    var players = require('./players');
    var traces = require('./traces');
    var profiles = require('./profiles');
    var traces_ = require('./traces_');

    return {
        start: function(trackingCode, authorization, email) {
            return players.findByAuthorization(authorization)
                .then(function(player) {
                    if (player) {
                        return authTokens.start(player._id, trackingCode)
                            .then(function(authToken) {
                                // MARKO add user to profiles if not exists
                                return profiles.find({email: email}, true).then(function(profile) {
                                    if(!profile) {
                                        profiles.insert({
                                            email: email,
                                            authToken: authToken,
                                            playerName: player.name,
                                            earnedBadges: [],
                                            designed: [],
                                            admin: false
                                        }, {w: 0});

                                        return {
                                            authToken: authToken,
                                            playerName: player.name
                                        };
                                    }
                                    else if(profile) {
                                        return {
                                            authToken: profile.authToken,
                                            playerName: profile.playerName
                                        }
                                    }
                                });
                            });
                    } else {
                        throw {
                            status: 401
                        };
                    }
                });
        },
        track: function(email, data) {
            // MARKO find profile of user with emal
            return profiles.find({email: email}, true).then(function(record) {
                if(record) {
                    // MARKO if found add trace with authToken of this user
                    return authTokens.track(record.authToken).then(function(authToken) {
                        return traces.add(authToken.playerId, authToken.versionId, authToken.gameplayId, data);
                    });
                }
                else {
                    console.log('Something went wrong...');
                    throw {
                        status: 401
                    };
                }
            });
        },
        // MARKO add a badge to an existing profile
        addBadge: function(email, badge_path, dbProvider) {
            var profs = dbProvider.db().collection("profiles");

            // Check if exists
            return profiles.find({email: email, "earnedBadges.path": badge_path}, true).then(function(record) {
                if(record) {
                    // If yes, just update the awarded counter
                    profs.update({email: email, "earnedBadges.path": badge_path}, {$inc: {"earnedBadges.$.awarded": 1}}, function(err, result)  {
                        // console.log("ERR: " + err);
                        // console.log("RESULT: " + result);
                    });
                }
                else {
                    // If not, create with counter set to 1
                    profs.update({email: email}, {$addToSet: {earnedBadges: { path: badge_path, awarded: 1}}}, function(err, result) {
                        // console.log("ERR: " + err);
                        // console.log("RESULT: " + result);
                    });
                }
            });
        },
        // MARKO return one record of profiles based on the useremail
        getProfile: function(email) {
            return profiles.find({email: email}, true)
                .then(function(record) {
                    if(record) {
                        return record;
                    }
                    else {
                        throw {
                            status: 401
                        };
                    }
                });
        },
        // MARKO Find traces based on query
        queryTraces: function(email, statistic, gameID, type) {
            // MARKO find profile of user with email
            return profiles.find({email: email}, true).then(function(record) {
                if(record) {
                    // MARKO if found return all traces which include this email and the given statistic
                    return authTokens.track(record.authToken).then(function(authToken) {
                        if(statistic) {
                            var query;
                            if(statistic == "elearning") {
                                query = {
                                    user: email,
                                    target: statistic
                                };
                            }
                            else {
                                query = {
                                    user: email,
                                    result: statistic
                                };
                            }

                            return traces_.find(query).then(function(records) {
                                if(records) {
                                    return {
                                        user: email,
                                        statistic: statistic,
                                        count: records.length
                                    }
                                }
                                else {
                                    console.log("Couldn't find any traces...");
                                    throw {
                                        status: 400
                                    };
                                }
                            });
                        }
                        else if(gameID) {
                            var query = {
                                event: "level_end",
                                target_game: parseInt(gameID)
                            };

                            if(type) {}
                            else {
                                query.user = email
                            }

                            return traces_.find(query).then(function(records) {
                                if(records) {
                                    var correct = 0,
                                        wrong = 0,
                                        show_me = 0,
                                        levels = {};

                                    for (var i = 0; i < records.length; ++i) {
                                        levels[records[i].target_level] = levels[records[i].target_level] || {};
                                        levels[records[i].target_level]['correct'] =
                                            levels[records[i].target_level]['correct'] || 0;
                                        levels[records[i].target_level]['wrong'] =
                                            levels[records[i].target_level]['wrong']  || 0;

                                        if(records[i].result == "correct") {
                                            correct++;
                                            levels[records[i].target_level]['correct'] += 1;
                                        }
                                        else if(records[i].result == "wrong") {
                                            wrong++;
                                            levels[records[i].target_level]['wrong'] += 1;
                                        }
                                        else if(records[i].result == "show_me") {
                                            show_me++;
                                        }
                                    }

                                    // console.log(levels);

                                    var returnValue = {
                                        user: email,
                                        target_game: gameID,
                                        correct: correct,
                                        wrong: wrong,
                                        show_me: show_me
                                    };

                                    // Admin requires no worst levels, so we can return
                                    if(type === "admin") {
                                        return returnValue;
                                    }

                                    // Create array from levels...
                                    var worst_levels = [];
                                    for (var level in levels) {
                                        // 1. Condition: Add level to worst levels only if more then 1 answer was given
                                        if(levels[level].correct + levels[level].wrong > 1) {
                                            var ratio = levels[level].wrong / (levels[level].correct + levels[level].wrong);

                                            // 2. Condition: Add level to worst levels only if more wrong then correct answers
                                            if(ratio > 0.5) {
                                                worst_levels.push(
                                                    {
                                                        level: level,
                                                        correct: levels[level].correct,
                                                        wrong: levels[level].wrong,
                                                        ratio: ratio
                                                    }
                                                );
                                            }
                                        }
                                    }

                                    // ...and sort by ratio...
                                    worst_levels = worst_levels.sort(function(a, b) {
                                        return -(a.ratio - b.ratio);
                                    });

                                    // ... and limit to 10
                                    worst_levels = worst_levels.slice(0, 10);

                                    // console.log(worst_levels);
                                    returnValue.worst_levels = worst_levels;
                                    return returnValue;
                                }
                                else {
                                    console.log("Couldn't find any traces with gameID...");
                                    throw {
                                        status: 400
                                    };
                                }
                            });
                        }
                    });
                }
                else {
                    console.log("Couldn't find user_email...");
                    throw {
                        status: 401
                    };
                }
            });
        },
        // Get the highScore of the given user as well as 2 High Scores above and 2 High Scores below
        highScore: function(email) {
            // MARKO find profile of user with email
            return profiles.find({email: email}, true).then(function(record) {
                if(record) {
                    return authTokens.track(record.authToken).then(function(authToken) {
                        return traces_.find({event: "level_end"}).then(function(records) {
                            if(records) {
                                // Create object of all HighScores
                                var highScores = {};
                                for(var i = 0; i < records.length; i++) {
                                    // Initialize the High Score
                                    if(!highScores[records[i].user]) {
                                        highScores[records[i].user] = 0;
                                    }

                                    if(records[i].result == "correct") {
                                        // Correct answer gives 5 points
                                        highScores[records[i].user] += 5;
                                    }
                                    else if(records[i].result == "wrong") {
                                        // Correct answer gives -2 points
                                        highScores[records[i].user] -= 2;
                                    }
                                    else if(records[i].result == "show_me") {
                                        // Correct answer gives 0 points
                                        highScores[records[i].user] += 0;
                                    }
                                }

                                if(highScores[email]) {}
                                else {
                                    highScores[email] = 0;
                                }

                                // Create Array from HighScores,...
                                var scores = [];
                                for (var player in highScores) {
                                    scores.push({user: player, score: highScores[player]});
                                }

                                // ...and sort the array by score,...
                                scores = scores.sort(function(a, b) {
                                    return a.score - b.score;
                                });

                                // console.log(scores);

                                // ...and add the rank to the HighScores
                                for(var i = 0; i < scores.length; i++) {
                                    scores[i].rank = scores.length - i;
                                }

                                // Get the HighScore of the given user, as well as 2 above and 2 below
                                var indices = [];
                                var names = {};
                                // First: find index of the user in the sorted scores array
                                var searchTerm = email;
                                for(var i = 0; i < scores.length; i++) {
                                    if (scores[i].user === searchTerm) {
                                        indices.push(i);
                                        names[i] = email;
                                        break;
                                    }
                                }

                                // console.log(indices);

                                // Second: Add one HighScore above the user's HighScore
                                if(scores[indices[0] + 1]) {
                                    names[indices[0] + 1] = "Your next Milestone";
                                    indices.push(indices[0] + 1);

                                    // If it was found find one even higher
                                    if(scores[indices[1] + 1]) {
                                        names[indices[1] + 1] = "Your next Challenge";
                                        indices.push(indices[1] + 1);
                                    }
                                }

                                // console.log(indices);

                                // Third: Add one HighScore below the user's HighScore
                                if(scores[indices[0] - 1]) {
                                    names[indices[0] - 1] = "You've beaten this guy";
                                    indices.unshift(indices[0] - 1);

                                    // If it was found, find one even lower
                                    if(scores[indices[0] - 1]) {
                                        names[indices[0] - 1] = "...and this guy";
                                        indices.unshift(indices[0] - 1);
                                    }
                                }

                                // console.log(indices);

                                // Fourth: With the indices, create array of the actual scores and return
                                var returnScores = [];
                                indices.forEach(function(currentValue) {
                                    scores[currentValue].user = names[currentValue];
                                    returnScores.push(scores[currentValue]);
                                });

                                return returnScores;
                            }
                            else {
                                console.log("Couldn't find any traces...");
                                throw {
                                    status: 400
                                };
                            }
                        });
                    });
                }
                else {
                    console.log("Couldn't find user_email...");
                    throw {
                        status: 401
                    };
                }
            });
        },
        experience: function(email) {
            return profiles.find({email: email}, true).then(function(profile) {
                if(profile) {
                    return authTokens.track(profile.authToken).then(function(authToken) {
                        // Calculate the experience points
                        var experience_points = 0;

                        // 1. Add 150 points per created game
                        experience_points += profile.designed.length * 150;

                        // 2. Add 10 points per earned badge
                        profile.earnedBadges.forEach(function(badge) {
                            experience_points += badge.awarded * 10;
                        });

                        // 3. Add the the number of basic elearning links clicked
                        traces_.find({user: email, target: "elearning"}).then(function(records) {
                            var points = 0;
                            if(records) {
                                points += records.length;
                            }
                            experience_points += points;
                        });

                        // 4. Add the highscore of this user
                        traces_.find({user: email, event: "level_end"}).then(function(records) {
                            if(records) {
                                var highScore = 0;
                                for(var i = 0; i < records.length; i++) {
                                    if(records[i].result == "correct") {
                                        // Correct answer gives 5 points
                                        highScore += 5;
                                    }
                                    else if(records[i].result == "wrong") {
                                        // Correct answer gives -2 points
                                        highScore -= 2;
                                    }
                                    else if(records[i].result == "show_me") {
                                        // Correct answer gives 0 points
                                        highScore += 0;
                                    }
                                }
                                experience_points += highScore;
                            }
                        });

                        // 5. Add the number of logins
                        return traces_.find({user: email, event: "login"}).then(function(records) {
                            if(records) {
                                experience_points += records.length * 0.5;
                            }

                            var total_experience = experience_points;
                            var exp_to_next_level = 0;
                            var level_name = "Total Noob";

                            // 6. Calculate the experience level
                            var level = 0;
                            if(experience_points > 100) {
                                level++;
                                experience_points -= 100;
                                exp_to_next_level = 150 - experience_points;
                                level_name = "Beginner";
                            }
                            if(experience_points > 150) {
                                level++;
                                experience_points -= 150;
                                exp_to_next_level = 250 - experience_points;
                                level_name = "Experienced Elearner";
                            }
                            if(experience_points > 250) {
                                level++;
                                experience_points -= 250;
                                exp_to_next_level = 500 - experience_points;
                                level_name = "Professional";
                            }
                            if(experience_points > 500) {
                                level++;
                                experience_points -= 500;
                                exp_to_next_level = 1000 - experience_points;
                                level_name = "Expert";
                            }
                            if(experience_points > 1000) {
                                level++;
                                experience_points -= 1000;
                                exp_to_next_level = "0 - Max Level";
                                level_name = "Master";
                            }

                            // 7. Calculate the percentage towards the next level
                            var progress = 0;
                            switch (level) {
                                case 0:
                                    progress = Math.round(experience_points / 100 * 100);
                                    break;
                                case 1:
                                    progress = Math.round(experience_points / 150 * 100);
                                    break;
                                case 2:
                                    progress = Math.round(experience_points / 250 * 100);
                                    break;
                                case 3:
                                    progress = Math.round(experience_points / 500 * 100);
                                    break;
                                case 4:
                                    progress = Math.round(experience_points / 1000 * 100);
                                    break;
                                case 5:
                                    progress = 100;
                                    break;
                            }

                            // 8. Return
                            return {
                                user: email,
                                total_experience: total_experience,
                                level_experience: experience_points,
                                to_next_level: exp_to_next_level,
                                level: level,
                                level_name: level_name,
                                level_progress: progress
                            };
                        });
                    });
                }
                else {
                    console.log("Couldn't find user_email...");
                    throw {
                        status: 401
                    };
                }
            });
        }
    };
})();
