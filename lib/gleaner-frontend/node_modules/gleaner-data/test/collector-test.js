var testHelper = require('./test-helper')();
var test = testHelper.test;
var helper = testHelper.helper();

var versionId;
var trackingCode;

testHelper.setUp(function (callback) {
    helper.req.post('/games')
        .end(function (err, res) {
            helper.req.post('/games/' + res.body._id + '/versions')
                .end(function (err, res) {
                    console.log(res.body);
                    trackingCode = res.body.trackingCode;
                    versionId = res.body._id;
                    callback();
                });
        });
});

test.track = function (test) {
    test.expect(3);
    helper.req.post('/start/' + trackingCode)
        .expect(200)
        .set('Accept', 'application/json')
        .set('Authorization', 'a:')
        .expect('Content-Type', /json/)
        .end(function (err, res) {
            if (err) {
                test.ok(false, err.stack);
                test.done();
            } else {
                console.log(res.body);
                test.ok(res.body.authToken);
                test.ok(res.body.playerName);
                helper.req.post('/track')
                    .expect(200)
                    .set('Authorization', res.body.authToken)
                    .send([{
                        a: 0
                    }, {
                        b: 0
                    }])
                    .end(function (err, res) {
                        if (err) {
                            test.ok(false, err.stack);
                        } else {
                            console.log(res.body);
                            test.ok(res.body === true);
                        }
                        test.done();
                    });
            }
        });
};

test.startEvent = function (test) {
    var authToken;
    test.expect(4);
    helper.req.post('/start/' + trackingCode)
        .expect(200)
        .set('Accept', 'application/json')
        .set('Authorization', 'a:')
        .expect('Content-Type', /json/)
        .end(function (err, res) {
            if (err) {
                test.ok(false, err.stack);
                test.done();
            } else {
                console.log(res.body);
                test.ok(authToken = res.body.authToken);
                test.ok(res.body.playerName);
                helper.req.post('/track')
                    .expect(200)
                    .set('Authorization', authToken)
                    .send([{
                        event: 'start'
                    }, {
                        event: 'start'
                    }, {
                        event: 'start'
                    }])
                    .end(function (err, res) {
                        if (err) {
                            test.ok(false, err.stack);
                        } else {
                            console.log(res.body);
                            test.ok(res.body === true);
                        }
                        checkGameplays(test, authToken);
                    });
            }
        });
};

var checkGameplays = function (test, authToken) {
    var authTokens = require('../lib/auth-tokens');
    authTokens.find({
        authToken: authToken
    }, true).then(function (authToken) {
        var Collection = require('easy-collections');
        var gameplays = new Collection(require('../lib/db'), 'gameplays_' + authToken.versionId);
        gameplays.find({
            playerId: authToken.playerId
        }).then(function (gameplays) {
            test.strictEqual(4, gameplays.length);
            test.done();
        });
    });
};

// MARKO
test.getProfile = function (test) {
    test.expect(5);
    // Start a new tracking
    // Should exists
    // Should not have any badges
    // Should not have any games designed
    // Should not be adming
    var email = 'marko.kajzer@hotmail.de';

    helper.req.post('/start/' + trackingCode)
        .set('Authorization', 'a:')
        .set('Email', email)
        .end(function (err, res) {
            if (err) {
                test.ok(false, err.stack);
                test.done();
            }
            else {
                helper.req.get('/profiles')
                    .set('Email', email)
                    .end(function (err, res) {
                        if (err) {
                            test.ok(false, err.stack);
                            test.done();
                        }
                        else {
                            var profile = res.body;
                            console.log(profile);
                            test.ok(profile, 'Profile should exist.');
                            test.deepEqual(profile.email, email, 'Should have the same email');
                            test.deepEqual(profile.earnedBadges.length, 0, 'Should not have any badges.');
                            test.deepEqual(profile.designed.length, 0, 'Should not have any games designed.');
                            test.deepEqual(profile.admin, false, 'Should not be admin.');
                            test.done();
                        }
                    });
            }
        });
};

test.addBadge = function (test) {
    test.expect(14);
    // Start a new tracking
    // Check that profile exists and badges are empty
    // Add a badge
    // Check that badge has awarded == 1
    // Add same badge
    // Check that awarded was incremented by 1
    // Add different badge
    // Check that badge is present
    var email = 'marko.kajzer@hotmail.de';

    var profiles = require('../lib/profiles');
    helper.req.post('/start/' + trackingCode)
        .set('Authorization', 'a:')
        .set('Email', email)
        .end(function (err, res) {
            if (err) {
                test.ok(false, err.stack);
                test.done();
            }
            else {
                profiles.find({email: email}, true).then(function(profile) {
                    test.ok(profile, 'Profile should exists here.');
                    test.deepEqual(profile.earnedBadges.length, 0, 'Profile should not have any badges.');

                    helper.req.post('/badges')
                        .set('Email', email)
                        .set('Badge_path', "tutorial/tutorial")
                        .end(function(err, stack) {
                            if (err) {
                                test.ok(false, err.stack);
                                // test.done();
                            }
                            else {
                                profiles.find({email: email}, true).then(function(profile) {
                                    console.log(profile);
                                    test.ok(profile, 'Profile should exists.');
                                    test.deepEqual(profile.earnedBadges.length, 1, 'Profile should have one badge...');
                                    var badge = profile.earnedBadges[0];
                                    console.log(badge);
                                    test.deepEqual(badge.path, 'tutorial/tutorial', '..which is for Tutorial game...');
                                    test.deepEqual(badge.awarded, 1, '...and was awarded once');

                                    helper.req.post('/badges')
                                        .set('Email', email)
                                        .set('Badge_path', 'tutorial/tutorial')
                                        .end(function(err, stack) {
                                            if (err) {
                                                test.ok(false, err.stack);
                                                test.done();
                                            }
                                            else {
                                                profiles.find({email: email}, true).then(function(profile) {
                                                    test.ok(profile, 'Profile should exists.');
                                                    test.deepEqual(profile.earnedBadges.length, 1, 'Profile should have one badge...');
                                                    var badge = profile.earnedBadges[0];
                                                    console.log(badge);
                                                    test.deepEqual(badge.path, 'tutorial/tutorial', '...which is for Tutorial...');
                                                    test.deepEqual(badge.awarded, 2, '...and was awarded twice');

                                                    helper.req.post('/badges')
                                                        .set('Email', email)
                                                        .set('Badge_path', 'hormones/hormones')
                                                        .end(function(err, stack) {
                                                            if (err) {
                                                                test.ok(false, err.stack);
                                                                test.done();
                                                            }
                                                            else {
                                                                profiles.find({email: email}, true).then(function(profile) {
                                                                    test.ok(profile, 'Profile should exists here.');
                                                                    test.deepEqual(profile.earnedBadges.length, 2, 'Profile should have one badge...');
                                                                    var badge = profile.earnedBadges[1];
                                                                    console.log(badge);
                                                                    test.deepEqual(badge.path, 'hormones/hormones', '...second of which is for Hormones game...');
                                                                    test.deepEqual(badge.awarded, 1, '...and was awarded once.');
                                                                    test.done();
                                                                });
                                                            }
                                                        });
                                                });
                                            }
                                        });
                                });
                            }
                        });
                });
            }
        });
};

test.queryTraces = function(test) {
    test.expect(9);
    // Start tracking for user
    // Create different traces for a given user...
    // and different games
    // Call method for...
    // 1. statistic: correct,
    // 2. statistic: wrong,
    // 3. statistic: elearning
    // Check if results match expectations
    var email = 'marko.kajzer@hotmail.de';
    var traces = [];
    var correct = wrong = elearning = 0;
    var testOne = testTwo = testThree = false;

    for(var i = 0; i < 100; i++) {
        var type = Math.floor(Math.random() * 4);
        var game = Math.floor(Math.random() * 2) + 1;
        var level = Math.floor(Math.random() * 20) + 1;
        var new_trace;

        switch(type) {
            case 0:
                new_trace = {
                    "type" : "logic", "event" : "level_end",
                    "target_level" : level, "target_game" : game, "user" : email,
                    "result" : "correct"
                };
                traces.push(new_trace);
                correct++;
                break;
            case 1:
                new_trace = {
                    "type" : "logic", "event" : "level_end",
                    "target_level" : level, "target_game" : game, "user" : email,
                    "result" : "wrong"
                };
                traces.push(new_trace);
                wrong++;
                break;
            case 2:
                new_trace = {"type": "input", "target": "elearning", "action": "clicked",
                    "context_game": game, "context_level": level, "user": email
                };
                traces.push(new_trace);
                elearning++;
                break;
            default:
                i--;
                break;
        }
    }

    helper.req.post('/start/' + trackingCode)
        .set('Authorization', 'a:')
        .set('Email', email)
        .end(function (err, res) {
            if (err) {
                test.ok(false, err.stack);
                test.done();
            } else {
                helper.req.post('/track')
                    .expect(200)
                    .set('Email', email)
                    .send(traces)
                    .end(function (err, res) {
                        if (err) {
                            test.ok(false, err.stack);
                            test.done();
                        } else {
                            helper.req.get('/traces')
                               .set('Email', email)
                               .set('Statistic', 'correct')
                               .end(function (err, res) {
                                   if (err) {
                                       test.ok(false, err.stack);
                                       test.done();
                                   } else {
                                        // Here of course we should check what comes back from queryTraces
                                        // However queryTraces uses one particular database table in the database "gleaner"
                                        // So what to do here?
                                        // Unittests for database are also kinda not feeling right...
                                        test.deepEqual(res.body.user, email, 'Should belong to given email!');
                                        test.deepEqual(res.body.statistic, 'correct', 'Should be of type correct!');
                                        test.deepEqual(correct, correct, 'Should have ' + correct + ' records!');

                                        helper.req.get('/traces')
                                           .set('Email', email)
                                           .set('Statistic', 'wrong')
                                           .end(function (err, res) {
                                               if (err) {
                                                   test.ok(false, err.stack);
                                                   test.done();
                                               } else {
                                                    test.deepEqual(res.body.user, email, 'Should belong to given email!');
                                                    test.deepEqual(res.body.statistic, 'wrong', 'Should be of type wrong!');
                                                    test.deepEqual(wrong, wrong, 'Should have ' + wrong + ' records!');

                                                    helper.req.get('/traces')
                                                       .set('Email', email)
                                                       .set('Statistic', 'elearning')
                                                       .end(function (err, res) {
                                                           if (err) {
                                                               test.ok(false, err.stack);
                                                               test.done();
                                                           } else {
                                                                test.deepEqual(res.body.user, email, 'Should belong to given email!');
                                                                test.deepEqual(res.body.statistic, 'elearning', 'Should be of type elearning!');
                                                                test.deepEqual(elearning, elearning, 'Should have ' + elearning + ' records!');
                                                                test.done();
                                                           }
                                                       });
                                               }
                                           });
                                   }
                               });
                        }
                    });
            }
        });
};

test.highScore = function(test) {
    test.ok(true);
    test.done();
}

test.experience = function(test) {
    test.ok(true);
    test.done();
}

module.exports = test;
